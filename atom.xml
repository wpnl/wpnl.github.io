<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>锟斤拷哒</title>
  <icon>https://www.gravatar.com/avatar/9821c5879313d50dd8d5530069a6fa91</icon>
  <subtitle>0xEFBF0xBDEF0xBDEF</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-08T02:11:17.151Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Fwfeng</name>
    <email>532118819@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>页面性能优化</title>
    <link href="http://yoursite.com/2019/08/adas/"/>
    <id>http://yoursite.com/2019/08/adas/</id>
    <published>2019-08-08T08:11:00.000Z</published>
    <updated>2019-08-08T02:11:17.151Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

      
    
    </summary>
    
    
      <category term="性能" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>从输入URL到页面加载完成的过程</title>
    <link href="http://yoursite.com/2019/08/url-loading-process/"/>
    <id>http://yoursite.com/2019/08/url-loading-process/</id>
    <published>2019-08-06T12:11:00.000Z</published>
    <updated>2019-08-07T01:34:52.163Z</updated>
    
    <content type="html"><![CDATA[<p>其实这种问题网络上有很多，但是每篇文章各有千秋，而我写这篇文章，也是想仔细缕一缕这个过程，让自己更深刻的理解。</p><a id="more"></a><h2 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h2><h3 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h3><p>为了准确无误地将数据送达目标处，<strong>TCP</strong>协议采用了三次握手策略。用<strong>TCP</strong>协议把数据包送出去后，<strong>TCP</strong>不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。</p><p>首先我们要先了解下TCP/IP协议族的分层管理</p><p>TCP/IP协议族按层次分别分为：<strong>应用层、传输层、网络层和数据链路层</strong></p><ul><li>应用层：应用层决定了向用户提供应用服务时通信的活动。<strong>DNS服务、HTTP协议</strong>存在该层。(<a href="/2019/06/web-url/" title="HTTP协议可以查看我写的另外一篇文章">HTTP协议可以查看我写的另外一篇文章</a>)</li><li>传输层：提供处于网络连接中的两台计算机之间的数据传输。</li><li>网络层： 网络层用来处理在网络上流动的数据包。</li><li>链路层： 用来处理连接网络的硬件部分。</li></ul><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>DNS域名解析,说得简单点就是将好记的域名解析成IP，服务由DNS服务器完成，是把域名解析到一个IP地址，然后在此IP地址的主机上将一个子目录与域名绑定。互联网中的地址是数字的IP地址，域名解析的作用主要就是为了便于记忆。</p><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><ol><li>浏览器查找域名对应的<strong>IP</strong>地址（DNS解析）</li><li>HTTP协议生成<strong>HTTP</strong>请求报文。</li><li>客户端与服务器建立<strong>TCP</strong> 连接（三次握手🤝）。</li><li>浏览器向服务器发送HTTP请求。</li><li>浏览器拿到服务端响应内容，解码、渲染。</li><li>通讯完成关闭<strong>TCP</strong>连接（四次挥手👋）</li></ol><p><strong>每个过程中间还会发生很多事情，下面单独分析每个过程发生的细节</strong></p><h3 id="1-浏览器查找域名对应的IP地址"><a href="#1-浏览器查找域名对应的IP地址" class="headerlink" title="1.浏览器查找域名对应的IP地址"></a>1.浏览器查找域名对应的IP地址</h3><p><strong>DNS服务</strong></p><blockquote><p>DNS服务是和HTTP协议位于应用层的协议。它提供域名到IP地址之间的解析服务。</p></blockquote><h4 id="1-1-DNS查询"><a href="#1-1-DNS查询" class="headerlink" title="1.1 DNS查询"></a>1.1 DNS查询</h4><p>操作系统会先检查本地hosts文件是否有这个网址映射关系，如果有就调用这个IP地址映射，完成域名解析。</p><p>否则，查找本地<strong>DNS</strong>解析器缓存，如果查找到则返回。</p><p>否则，查找本地<strong>DNS</strong>服务器，如果查找到则返回。</p><p>否则，则发起一个递归<strong>DNS</strong>解析请求，一层一层逐级向上查询找到IP地址。</p><p><strong>补充</strong><br>这里是有缓存相关的知识，涉及浏览器缓存、DNS缓存，缓存内容的有效性决定是否需要发送HTTP请求。在这里不在细说。</p><h3 id="2-HTTP协议生成HTTP请求报文"><a href="#2-HTTP协议生成HTTP请求报文" class="headerlink" title="2.HTTP协议生成HTTP请求报文"></a>2.HTTP协议生成HTTP请求报文</h3><p>HTTP协议生成针对目标 Web 服务器的 HTTP 请求报文，请求报文由<strong>请求行、请求头部、数据体</strong>3个部分组成。</p><h3 id="3-客户端与服务器建立TCP连接"><a href="#3-客户端与服务器建立TCP连接" class="headerlink" title="3.客户端与服务器建立TCP连接"></a>3.客户端与服务器建立TCP连接</h3><p>拿到了服务器的 IP 地址以及 HTTP 请求报文，就开始与服务器建立 TCP 连接了。</p><h4 id="3-1-三次握手🤝（SYN-SYN-ACK-ACK）"><a href="#3-1-三次握手🤝（SYN-SYN-ACK-ACK）" class="headerlink" title="3.1 三次握手🤝（SYN,SYN/ACK,ACK）"></a>3.1 三次握手🤝（SYN,SYN/ACK,ACK）</h4><p><img src="/assets/images/url-three-handshake.jpg" alt="三次握手"></p><ol><li>客户端把标有<strong>SYN</strong>的数据包发给服务器</li><li>服务器接收到客户端的数据包，并发送标有<strong>SYN/ACK</strong>的数据包给客户端。</li><li>客户端接收到服务器发送的数据包后，再发送标有<strong>ACK</strong>的数据包给服务器。</li></ol><p>这样，客户端与服务器两者就建立了连接。</p><h3 id="4-浏览器向服务器发送HTTP请求"><a href="#4-浏览器向服务器发送HTTP请求" class="headerlink" title="4.浏览器向服务器发送HTTP请求"></a>4.浏览器向服务器发送HTTP请求</h3><p><strong>一个HTTP请求过程如下：</strong></p><ol><li>客户端在应用层（HTTP协议）发出一个<strong>HTTP</strong>请求。</li><li>在传输层（TCP协议）把从应用层处收到的数据（HTTP请求报文）进行分割，并在各个报文上打上标记序号及端口号后转发给网络层。</li><li>在网络层（IP协议），增加作为通信目的地的MAC地址后转发给链路层。这样一来，发往网络的通信请求就准备齐全了。</li><li>接收端的服务器在链路层接受到数据，按序往上层发送，一直到应用层。当传输到应用层时，才能算真正接收到由客户端发送过来的<strong>HTTP</strong>请求。</li><li>服务器请求的处理结果也同样利用 TCP/IP 通信协议向客户端进行回传。</li></ol><p>数据经过应用层、传输层、网络层、链路层逐层封装，传输到下一个目的地。</p><p>然后接着从链路层得到数据后逐层的解包，最终将数据发送服务端。</p><h3 id="5-浏览器拿到服务端响应内容，解码、渲染"><a href="#5-浏览器拿到服务端响应内容，解码、渲染" class="headerlink" title="5.浏览器拿到服务端响应内容，解码、渲染"></a>5.浏览器拿到服务端响应内容，解码、渲染</h3><h4 id="5-1-解码"><a href="#5-1-解码" class="headerlink" title="5.1 解码"></a>5.1 解码</h4><p>浏览器拿到服务端响应的内容后，开始解析其中的html文件，遇到js/css/img等资源连接，就向服务器端去请求下载</p><h4 id="5-2-渲染"><a href="#5-2-渲染" class="headerlink" title="5.2 渲染"></a>5.2 渲染</h4><p>浏览器根据html、css、js渲染DOM树，绘制等。</p><h3 id="6-关闭TCP连接（四次挥手👋）"><a href="#6-关闭TCP连接（四次挥手👋）" class="headerlink" title="6.关闭TCP连接（四次挥手👋）"></a>6.关闭TCP连接（四次挥手👋）</h3><ol><li>客户端向服务器端发送一个<strong>FIN</strong>，请求关闭数据传输。</li><li>服务器接收到客户端的<strong>FIN</strong>时，向客户端发送一个<strong>ACK</strong>。（表示收到）</li><li>然后服务器向客户端发送一个<strong>FIN</strong>。（告诉客户端准备就绪，可以关闭）</li><li>客户端收到服务器端的<strong>FIN</strong>时，发送<strong>ACK</strong>给服务器端，并断开连接。（反馈确认信号给服务器）</li></ol><p><strong>补充说明</strong></p><ol><li>服务器在接到断开请求时不立即同意断开：因为服务器接收到断开请求时，只能说明客户端没有数据需要获取了，但是可能存在服务器还有未发送完毕的数据，所以要等服务器先发送确认信号，所以数据传输完毕后再同意断开。</li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>《图解HTTP》<br>《HTTP权威指南》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实这种问题网络上有很多，但是每篇文章各有千秋，而我写这篇文章，也是想仔细缕一缕这个过程，让自己更深刻的理解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="URL" scheme="http://yoursite.com/tags/URL/"/>
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
      <category term="TCP/IP" scheme="http://yoursite.com/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>Web安全基础</title>
    <link href="http://yoursite.com/2019/07/webSafety/"/>
    <id>http://yoursite.com/2019/07/webSafety/</id>
    <published>2019-07-29T08:11:00.000Z</published>
    <updated>2019-08-07T07:34:31.640Z</updated>
    
    <content type="html"><![CDATA[<p>Web安全主要分为客户端和服务器，文章主要讲述Web安全相关知识，从中可以了解到各种各样的攻击方式，对所有的安全问题有一定的认识和见解，对开发者开发时有一定的思考。</p><a id="more"></a><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ul><li>XSS</li><li>CSRF</li><li>点击劫持</li><li>URL跳转</li><li>…</li></ul><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><blockquote><p>下面讲解XSS相关知识内容。</p></blockquote><h4 id="什么是XSS"><a href="#什么是XSS" class="headerlink" title="什么是XSS"></a>什么是XSS</h4><p>XSS叫做（Cross Site Script）跨站脚本。</p><p>黑客通过“HTML注入”篡改网页，<strong>插入恶性脚本</strong>，当用户在浏览网页时，实现控制用户浏览器行为的一种攻击方式。</p><p>常见的危害有：盗取用户信息，钓鱼，制作蠕虫等。</p><h4 id="XSS分类"><a href="#XSS分类" class="headerlink" title="XSS分类"></a>XSS分类</h4><blockquote><p>存储型</p></blockquote><ol><li>黑客通过恶意构造XSS脚本，提交给Web应用程序，把恶意数据写入到数据库中。</li><li>当用户访问Web应用时，前端从后端获取到恶意数据并在HTML里渲染。触发XSS脚本，从而盗取用户信息、冒充用户行为等操作。</li></ol><p>常见实例，黑客通过Web应用留言回复功能插入XSS脚本，当其他用户访问查看时即触发脚本代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--图片src加载错误，执行onerror函数触发脚本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"#"</span> <span class="attr">onerror</span>=<span class="string">"脚本代码"</span> &gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>反射型</p></blockquote><ol><li>黑客通过邮箱、分享等方式让用户访问携带XSS脚本的链接进入Web应用。</li><li>Web程序解析请求参数响应到浏览器，从而触发XSS脚本。（前后端不分离时常见）。</li></ol><blockquote><p>DOM型</p></blockquote><p>DOM型XSS和反射性XSS基本上是一样的，DOM型XSS是通过前端js将XSS脚本插入到DOM里（innterHTML）。比如把url上的锚点参数输出到html，从而触发XSS</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><table><thead><tr><th>XSS类型</th><th>存储型</th><th>反射型</th><th>DOM型</th></tr></thead><tbody><tr><td>触发过程</td><td>黑客构造XSS脚本,用户访问携带XSS脚本的页面</td><td>用户访问携带XSS脚本的页面</td><td>用户访问携带XSS脚本的页面</td></tr><tr><td>数据存储</td><td>数据库</td><td>URL</td><td>URL</td></tr><tr><td>输出类型</td><td>后端服务器</td><td>后端服务器</td><td>前端js</td></tr><tr><td>输出位置</td><td>HTTP响应中</td><td>HTTP响应中</td><td>动态构造的DOM节点</td></tr></tbody></table><ol><li>DOM型XSS和反射型XSS的区别</li></ol><ul><li><p>DOM型XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 js 自身的安全漏洞。</p></li><li><p>反射型XSS 攻击中，取出和执行恶意代码由服务端完成，服务端的安全漏洞。</p></li></ul><ol start="2"><li>XSS攻击主要是web1时代里经常遇到的漏洞，但是在目前前后端分离的情况下。前端使用MVVM框架编写应用时，对用是否渲染html都会特别注意。（<strong>一般只在可信的内容上使用</strong>）</li></ol><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><blockquote><p>下面讲解CSRF相关知识内容。</p></blockquote><h4 id="什么是CSRF"><a href="#什么是CSRF" class="headerlink" title="什么是CSRF"></a>什么是CSRF</h4><p>CSRF叫做（Cross-site request forgery）跨站请求伪造。</p><p>利用用户已登录的身份，在用户毫不知情的情况下，以用户的名义完成非法操作。常见的危害有：执行恶意操作（被转账、被发垃圾评论）等。</p><blockquote><p>正常转账过程</p></blockquote><ol><li>用户正常登录账号</li><li>通过请求转账接口进行转账</li><li>浏览器发送请求时，会自动带上Cookie及请求参数（收款人信息）</li><li>服务端通过Cookie识别用户身份、从参数获取到收款人信息，执行转账操作</li></ol><blockquote><p>异常转账过程（攻击）</p></blockquote><ol><li>用户正常登陆账号</li><li>黑客通过各种方式让用户访问构造恶意页面</li><li>恶意页面请求转账接口进行转账，盗用用户Cookie及伪造收款人信息</li><li>服务端通过Cookie识别用户身份、从参数获取到收款人信息，执行转账操作</li></ol><h4 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h4><ol><li>使用post请求，限制get请求（作用不大）</li><li>将cookie设置为HttpOnly，避免攻击者伪造cookie的情况出现</li><li>增加token校验</li><li>通过Referer识别请求来源地址。</li><li>跨域拦截。</li></ol><h3 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h3><blockquote><p>下面讲解点击劫持相关知识内容。</p></blockquote><p>通过覆盖不可见的框架(iframe)误导用户点击而造成的攻击行为。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>隐蔽性比较高</li><li>骗取用户操作</li><li>UI-覆盖攻击</li><li>利用了iframe或者其他标签的属性（Flash）</li></ul><h3 id="URL跳转"><a href="#URL跳转" class="headerlink" title="URL跳转"></a>URL跳转</h3><blockquote><p>下面讲解URL跳转相关知识内容。</p></blockquote><p>借助未验证的URL跳转，将应用程序引导到不安全的第三方页面（攻击者），从而导致的安全问题。</p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><ul><li>Header头跳转（通过设置响应头的Location）</li><li>JavaScript跳转（window.location.href）</li><li><meta>标签跳转（<meta http-equiv="Rrefresh" url="url...">）</li></ul><p><strong>流程</strong></p><ol><li>黑客构造恶意链接（具有迷惑性如<a href="http://www.baidu.com??url=恶意链接）" target="_blank" rel="noopener">www.baidu.com??url=恶意链接）</a></li><li>用户访问黑客构造链接</li><li>用户被引导进入恶意网站</li></ol><hr><h2 id="服务端安全问题"><a href="#服务端安全问题" class="headerlink" title="服务端安全问题"></a>服务端安全问题</h2><ul><li>SQL注入</li><li>命令注入</li><li>文件操作类</li><li>…</li></ul><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><blockquote><p>下面讲解SQL注入相关知识内容。</p></blockquote><h4 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入"></a>什么是SQL注入</h4><p>SQL注入叫做（SQL Injection）</p><p>是一种常见的Web安全漏洞，攻击者利用这个漏洞，可以访问或修改数据，利用潜在的数据库漏洞进行攻击。</p><blockquote><p>过程</p></blockquote><ol><li>服务端获取用户请求参数</li><li>拼接到代码当中</li><li>SQL语句按照我们构造参数的语义执成功</li></ol><h4 id="SQL注入的本质"><a href="#SQL注入的本质" class="headerlink" title="SQL注入的本质"></a>SQL注入的本质</h4><p><strong>数据和代码</strong>未分离，既<strong>数据当做了代码</strong>来执行</p><h4 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h4><blockquote><p>获取数据库信息</p></blockquote><ul><li>管理员后台账号和密码</li><li>获取其他数据库敏感数据</li><li>整个数据库：</li><li>获取服务器权限</li><li>植入Webshell，获取服务器后门</li><li>读取服务器敏感文件</li></ul><h3 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h3><blockquote><p>下面讲解命令注入相关知识内容。</p></blockquote><h4 id="命令注入满足三个条件"><a href="#命令注入满足三个条件" class="headerlink" title="命令注入满足三个条件"></a>命令注入满足三个条件</h4><ol><li>调用可执行系统命令的函数</li><li>函数或函数的参数可控</li><li>拼接注入命令</li></ol><h4 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h4><ol><li>黑客构造命令发送给服务端</li><li>服务端拼接命令执行注入的命令</li><li>服务端把命令执行的结果响应到黑客</li></ol><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>《Web白帽子》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Web安全主要分为客户端和服务器，文章主要讲述Web安全相关知识，从中可以了解到各种各样的攻击方式，对所有的安全问题有一定的认识和见解，对开发者开发时有一定的思考。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="Web漏洞" scheme="http://yoursite.com/tags/Web%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS原理理解</title>
    <link href="http://yoursite.com/2019/07/https/"/>
    <id>http://yoursite.com/2019/07/https/</id>
    <published>2019-07-05T08:11:00.000Z</published>
    <updated>2019-08-07T12:02:52.121Z</updated>
    
    <content type="html"><![CDATA[<p>在HTTP协议中可能存在信息窃听或身份伪装等安全问题，使用HTTPS通信机制可以有效地防止这些问题。这篇文章会先从HTTP的缺点开始讲述，从而引申出HTTPS的功能以及重要性。</p><a id="more"></a><h2 id="HTTP的缺点"><a href="#HTTP的缺点" class="headerlink" title="HTTP的缺点"></a>HTTP的缺点</h2><ul><li>通信使用明文，内容可能会被窃听。</li><li>不验证通信方的身份，因此有可能遭遇伪装。</li><li>无法证明报名的完整性，所以有可能已遭篡改。</li></ul><p>为了有效防止这些弊端，为了保证数据安全，所有<strong>HTTPS</strong>就派上用场了。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><strong>TLS</strong>：(Transport Layer Security，传输层安全协议)，用于两个应用程序之间提供保密性和数据完整性。其前身是SSL。</li><li><strong>SSL</strong>：（Secure Socket Layer，安全套接字层）：1994年为 Netscape 所研发，SSL 协议位于 TCP/IP 协议与各种应用层协议之间，为数据通讯提供安全支持。</li></ul><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTPS并非是应用层的一种新协议，只是HTTP通信接口部分用SSL和TLS协议代替。</p><p>一般情况，HTTP直接和TCP通信，当使用SSL时，则变成先和SSL通信，再由SSL和TCP通信。</p><ul><li><strong>HTTP</strong>：HTTP应用–&gt;TCP–&gt;IP</li><li><strong>HTTPS</strong>：HTTP应用–&gt;SSL–&gt;TCP–&gt;</li></ul><h2 id="加密技术"><a href="#加密技术" class="headerlink" title="加密技术"></a>加密技术</h2><p>对SSL讲解之前，先简单了解一下加密方法。SSL采用一种叫做公开密钥加密的加密处理方式。</p><p>近代的加密方式中加密算法是公开的，而密钥是保密的，通过这种方式得以保证加密方法的安全性。</p><p>加密和解密都会用到密钥。没有密钥就无法对密钥解密，反过来说，任何人只要持有密钥就能解密了。如果密钥被攻击者获取，那加密也就失去了意义。</p><h3 id="共享密钥加密的问题"><a href="#共享密钥加密的问题" class="headerlink" title="共享密钥加密的问题"></a>共享密钥加密的问题</h3><p>加密和解密同用一个密钥的方式称为共享密钥加密，也叫<strong>对称密钥加密</strong></p><p>在HTTP请求中，发送密钥就会有被窃听的风险，但不发送，对方就不能解密。如果密钥能安全发送，那数据也应该能安全送达。</p><h3 id="使用两把密钥的公开密钥加密"><a href="#使用两把密钥的公开密钥加密" class="headerlink" title="使用两把密钥的公开密钥加密"></a>使用两把密钥的公开密钥加密</h3><p>公开密钥加密方式解决了共享密钥加密的困难，<br>公开密钥加密使用一对非对称的密钥。（私有密钥和公开密钥）</p><blockquote><p>私有密钥：只有自己知道，其他任何人都不能知道。</p></blockquote><blockquote><p>公开密钥：公开密钥可以随意发布，任何人都可以获得。</p></blockquote><p><strong>使用公开密钥加密方式，发送密文的一方使用对方的公开密钥进行加密处理，对方收到被加密的信息后，再使用自己的私有密钥进行解密。利用这种方式，不需要发送用来解密的私有密钥，也不必担心密钥被攻击者窃听而盗走。</strong></p><h3 id="HTTPS采用混合加密机制"><a href="#HTTPS采用混合加密机制" class="headerlink" title="HTTPS采用混合加密机制"></a>HTTPS采用混合加密机制</h3><p>原因：公开密钥加密处理起来比共享密钥加密方式更为复杂，若在通信时使用公开密钥加密方式，效率会很低。</p><p>HTTPS采用共享密钥加密和公开密钥加密两者并用的混合加密机制。<strong>在交换密钥环节使用公开密钥加密方式，之后的建立通信交换报文阶段则使用共享密钥加密方式</strong>。</p><p><img src="/assets/images/https-encrypt.jpg" alt="HTTPS混合加密机制"></p><h3 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h3><p>公开密钥加密方式还是存在一些问题。那就是无法证明公开密钥本身就是货真价实的公开密钥。或许公开密钥在传输过程中，真正的公开密钥已经被攻击者替换掉了。</p><p>解决上述问题，可以使用由数字证书认证机构（CA，Certificate Authority）和其他相关机关颁发的公开密钥证书。数字证书认证机构处于客户端与服务器双方都可信赖的第三方机构的立场上。</p><p>通俗的讲：服务器自身发行的公开密钥没有权威性，无法证明公开密钥是自身发行的。</p><ol><li>那么假设有一个权威的第三方认证机构，服务器向数字证书认证机构提出公开密钥的申请。</li><li>数字证书认证机构对申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，将该公开密钥放入公钥证书后绑定在一起。（服务器得到一个证书）</li><li>服务器将这份由数字证书认证机构颁发的公钥证书发送给客户端，进行公开密钥加密方式通信。</li><li>接到证书的客户端使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证。如果验证通过，则说明服务器的公开密钥是可信的。</li></ol><p>补充：<br>此处认证机关的公开密钥必须安全地转交给客户端。所以大多数浏览器在发布版本时，会先在内部植入常用的认证机关的公开密钥。（不需要传输）</p><h3 id="HTTPS安全通信机制"><a href="#HTTPS安全通信机制" class="headerlink" title="HTTPS安全通信机制"></a>HTTPS安全通信机制</h3><p>HTTPS使用SSL和TLS这两个协议。<br>下面是HTTPS通信步骤</p><ol><li>客户端通过发送<strong>Client Hello</strong>报文开始SSL通信。报文中包含客户端支持的SSL指定版本、加密组件列表等。</li><li>服务器可进行SSL通信时，会以Server Hello报文作为应答。和客户端一样，在报文中包含SSL版本以及加密组件。服务器的加密组件内容是从接收到的客户端加密组件内筛选出来的。</li><li>之后服务器发送<strong>Certificate</strong>报文，报文中包含公开密钥证书。</li><li>最后服务器发送**Server Hello Done报文通知客户端，最初阶段的SSL握手协商部分完成。</li><li>SSL第一次握手结束后，客户端以<strong>Client Key Exchange</strong>报文作为回应。报文中包含通信加密中使用的一种被称为<strong>Pre-master secret</strong>的随机密码串。该报文已用第三步的公开密钥进行加密。</li><li>接着客户端继续发送<strong>Change Cipher Spec</strong>报文。该报文会提示服务器，在此报文之后的通信会采用<strong>Pre-master secret</strong>密钥加密。</li><li>客户端发送<strong>Finished</strong>报文。该报文包含连接至今全部报文的整体校验值。这次握手协商是否能够成功，要以服务器是否能够正确解密该报文座位判定标准。</li><li>服务器同样发送<strong>Change Cipher Spec</strong>报文。</li><li>服务器同样发送<strong>Finished</strong>报文。</li><li>服务器和客户端的Finished报文交换完毕之后，SSL链接就算建立完成。当然，通信会受到SSL的保护。从此处开始进行应用层协议的通信，发送HTTP请求。</li></ol><p>总结：相比HTTP协议，HTTPS 协议增加了很多握手、加密解密等流程，虽然过程很复杂，但其可以保证数据传输的安全。为了保证数据的安全，很有必要使用HTTPS。</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>《图解HTTP》<br>《HTTP权威指南》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在HTTP协议中可能存在信息窃听或身份伪装等安全问题，使用HTTPS通信机制可以有效地防止这些问题。这篇文章会先从HTTP的缺点开始讲述，从而引申出HTTPS的功能以及重要性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="HTTPS" scheme="http://yoursite.com/tags/HTTPS/"/>
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="SSL/TLS" scheme="http://yoursite.com/tags/SSL-TLS/"/>
    
  </entry>
  
  <entry>
    <title>Web通讯(HTTP协议)</title>
    <link href="http://yoursite.com/2019/06/web-url/"/>
    <id>http://yoursite.com/2019/06/web-url/</id>
    <published>2019-06-29T08:11:00.000Z</published>
    <updated>2019-08-07T03:28:47.080Z</updated>
    
    <content type="html"><![CDATA[<p>记录学习Web通讯基础，URL是网络上的链接，这个链接就像一个地址，用来准确定位到某个资源；下面是有关URL的简单介绍和理解。</p><a id="more"></a><h2 id="URL是什么？"><a href="#URL是什么？" class="headerlink" title="URL是什么？"></a>URL是什么？</h2><p>URL又叫做<strong>统一资源定位符</strong>（<strong>U</strong>niform <strong>R</strong>esource <strong>L</strong>ovator），它支持多种协议：<strong>HTTP</strong>、<strong>FTP</strong>…</p><h3 id="URL的格式"><a href="#URL的格式" class="headerlink" title="URL的格式"></a>URL的格式</h3><p>URL是有标准的格式，所有的浏览器和Web服务器都遵循这个标准的格式，保障了我们使用的浏览器能够访问服务器里特定的资源。</p><p>URL的详细格式：<strong>schema://host[:port#]/path/…/[?query-string][#anchor]</strong></p><ol><li>schema：底层协议（例如：http，https，ftp）</li><li>host：服务器的域名或者IP地址</li><li>port：服务器端口（HTTP默认端口是80，可省略）</li><li>path：表示访问资源的路径</li><li>query-string：发送给http服务器的数据</li><li>anchor：锚点，通常表示在页面的特定位置</li></ol><hr><p>从上面我们知道了什么是URL，知道URL包含很多协议，其中HTTP就是我们Web使用的协议，下面内容讲解什么HTTP协议相关知识。</p><h2 id="HTTP是什么？"><a href="#HTTP是什么？" class="headerlink" title="HTTP是什么？"></a>HTTP是什么？</h2><p>HTTP又叫做<strong>超文本传输协议</strong>（<strong>H</strong>yper <strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol）,它是Web通讯最常用的协议。</p><p><strong>HTTP</strong>报文是是比较重要的内容，其中包含请求报文和响应报文。简单的来说，<strong>HTTP</strong>报文都由简单的三部分组成（起始行，头，主体）。<strong>HTTP</strong>协议中的请求和响应报文中必定包含<strong>HTTP</strong>首部（起始行，头），首部内容为客户端和服务器分别处理请求和响应提供所需要的信息。下来来看看请求和响应报文的内容。</p><h3 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET /sugrec?pre=1&amp;p=3 HTTP/1.1     ---请求行（Request Line）</span><br><span class="line">Host: www.baidu.com                ---头部（Headers）</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Accept: text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36</span><br><span class="line">Referer: https://www.baidu.com/s?wd=%E9%94%9A&amp;rsv_spt=1</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: BIDUPSID=C4EC634634EE54FFA735244DAFA786D8; PSTM=1523352909; BD_UPN=123253; __cfduid=da802f70bcb5061a35bb3437e96873ab41542608259; BAIDUID=57224FD0460FA6A0918A6B0678BF848D:FG=1; MSA_WH=320_568; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; delPer=0; BD_CK_SAM=1; BD_HOME=1; BDRCVFR[feWj1Vr5u3D]=I67x6TjHwwYf0;</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line">|                                            |</span><br><span class="line">|                                            |</span><br><span class="line">|       数据体（Body）GET请求无此部分</span><br><span class="line">|                                            |</span><br><span class="line">|                                            |</span><br><span class="line">----------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="HTTP响应报文"><a href="#HTTP响应报文" class="headerlink" title="HTTP响应报文"></a>HTTP响应报文</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK ---状态行（Status Line）</span><br><span class="line">Content-Length: 404 ---消息报头</span><br><span class="line">Content-Type: text/plain; charset=UTF-8</span><br><span class="line">Date: Mon, 05 Aug 2019 02:31:02 GMT</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line">|                                            |</span><br><span class="line">|                                            |</span><br><span class="line">|                  响应正文</span><br><span class="line">|                                            |</span><br><span class="line">|                                            |</span><br><span class="line">----------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="相应报文状态码"><a href="#相应报文状态码" class="headerlink" title="相应报文状态码"></a>相应报文状态码</h3><table><thead><tr><th></th><th>类别</th><th>解释</th></tr></thead><tbody><tr><td>1XX</td><td>信息性状态码</td><td>接受的请求正在处理</td></tr><tr><td>2XX</td><td>成功状态码</td><td>请求正常处理完成</td></tr><tr><td>3XX</td><td>重定向状态码</td><td>需要进行附加操作</td></tr><tr><td>4XX</td><td>客户端错误状态码</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>服务器错误状态码</td><td>服务器处理请求出错</td></tr></tbody></table><p><strong>状态码详细解析</strong></p><ul><li><strong>200</strong>：表示从客户端发来的请求在服务器被正常处理。</li><li><strong>204</strong>：表示服务器接收的请求已成功处理，但没有数据返回。</li><li><strong>206</strong>：表示客户端进行了范围请求，而服务器成功执行了这部分的请求。响应报文中包含由<strong>Content-Range</strong>指定范围的实体内容。</li><li><strong>301</strong>：永久重定向（告知浏览器更新书签引用）。</li><li><strong>302</strong>：临时性重定向。表示请求的资源已被分配了新的URI，希望用户（本次）能使用新的URI访问。</li><li><strong>303</strong>：表示由于请求对应的资源存在着另一个URI，应使用GET方式定向获取请求的资源。（303状态码和302状态码有着相同的功能，但303状态码明确表示客户端应当采用GET方式获取资源。）</li><li><strong>400</strong>：表示请求报文中存在语法错误。</li><li><strong>401</strong>：表示发送的请求需要有通过HTTP认证的认证信息。另外如果之前已进行过一次请求，则表示用户认证失败。</li><li><strong>403</strong>：表示对请求资源的访问被服务器拒绝了。</li><li><strong>404</strong>：表示服务器上无法找到请求的资源。</li><li><strong>500</strong>：表示服务器在执行请求时发生了错误。</li><li><strong>503</strong>：表示服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li></ul><h3 id="HTTP首部字段-请求头部、消息报头）"><a href="#HTTP首部字段-请求头部、消息报头）" class="headerlink" title="HTTP首部字段(请求头部、消息报头）"></a>HTTP首部字段(请求头部、消息报头）</h3><p>HTTP首部字段是构成HTTP报文的重要要素之一。无论是请求还是响应都会使用首部字段，它能起到传递额外重要信息的作用。</p><h4 id="四种HTTP首部字段类型。"><a href="#四种HTTP首部字段类型。" class="headerlink" title="四种HTTP首部字段类型。"></a>四种HTTP首部字段类型。</h4><h5 id="通用首部字段"><a href="#通用首部字段" class="headerlink" title="通用首部字段"></a>通用首部字段</h5><blockquote><p>请求报文和响应报文都会使用的首部字段。</p></blockquote><h5 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h5><blockquote><p>从客户端向服务器发送请求报文时使用的首部，补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。</p></blockquote><h5 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h5><blockquote><p>从服务器向客户端返回响应报文时使用的首部，补充了响应的附加内容，也会要求客户端附加额外的内容信息。</p></blockquote><h5 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h5><blockquote><p>针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等与实体有关的信息。</p></blockquote><p>由于字段内容多且复杂，具体字段细节不在细说。</p><p>补充：</p><ol><li>get请求数据体是没有的，post请求发送的数据就会在数据体里。</li><li><strong>请求头部和数据体</strong>之间会有一行空行；<strong>消息报头和响应正文</strong>之间也会有一行空行；</li></ol><p>请求头部有两个比较重要的字段我们可以了解一下。</p><ol><li><strong>Cookie</strong>是用户的凭证（jwt的作用和Cookie相似，常用于登录身份校验）。</li><li><strong>Referer</strong>：主要作用是告知服务器该请求的来源（浏览器自动加上）所以可以用于统计流量的来源，也可以用于判断来源是否合法（防止盗链、防止CSRF漏洞）。</li></ol><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>《图解HTTP》<br>《Web白帽子》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录学习Web通讯基础，URL是网络上的链接，这个链接就像一个地址，用来准确定位到某个资源；下面是有关URL的简单介绍和理解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="URL" scheme="http://yoursite.com/tags/URL/"/>
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTMl5的sessionStorage和localStorage</title>
    <link href="http://yoursite.com/2017/07/HTML5-storage/"/>
    <id>http://yoursite.com/2017/07/HTML5-storage/</id>
    <published>2017-07-20T11:27:00.000Z</published>
    <updated>2019-08-05T01:53:11.413Z</updated>
    
    <content type="html"><![CDATA[<p>说说<code>LocalStorage</code>与<code>SessionStorage</code>的关系、以及<code>Cookie</code>与它们的区别。 </p><a id="more"></a><h3 id="sessionStorage和localStorage的关系"><a href="#sessionStorage和localStorage的关系" class="headerlink" title="sessionStorage和localStorage的关系"></a>sessionStorage和localStorage的关系</h3><p>Html5中的<code>Web Storage</code>包括了两种存储方式：<code>sessionStorage 和 localStorage</code>。</p><blockquote><ul><li><code>sessionStorage</code>用于本地存储一个会话<code>（session）</code>中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此<code>sessionStorage</code>不是一种持久化的本地存储，仅仅是会话级别的存储。</li><li>而<code>localStorage</code>用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</li></ul></blockquote><h3 id="Cookie的概念"><a href="#Cookie的概念" class="headerlink" title="Cookie的概念"></a>Cookie的概念</h3><blockquote><p><code>Cookie</code>是小甜饼的意思。顾名思义，<code>cookie</code> 确实非常小，它的大小限制为4KB左右，是网景公司的前雇员 Lou Montulli 在1993年3月的发明。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在<code>Cookie</code>中存入一段辨别用户身份的数据来实现的。</p></blockquote><h3 id="三者的区别"><a href="#三者的区别" class="headerlink" title="三者的区别"></a>三者的区别</h3><ol><li><strong>数据的生命周期</strong><br><code>Cookie</code>：一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效。<br><code>localStorage</code>：除非被清除，否则永久保存。<br><code>sessionStorage</code>：仅在当前会话下有效，关闭页面或浏览器后被清除。</li><li><strong>存放数据大小</strong><br><code>Cookie</code>：4KB左右。<br><code>localStorage 和 sessionStorage</code>：一般为5MB。</li><li><strong>与服务器端通信</strong><br><code>Cookie</code>：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题。<br><code>localStorage 和 sessionStorage</code>：仅在客户端（即浏览器）中保存，不参与和服务器的通信。</li></ol><p><strong>总的来说</strong>：<br><strong><code>Web Storage</code>的概念和<code>cookie</code>相似，区别是它是为了更大容量存储设计的。<br><code>Cookie</code>的大小是受限的，并且每次你请求一个新的页面的时候<code>Cookie</code>都会被发送过去，这样无形中浪费了带宽。<br>另外<code>cookie</code>还需要指定作用域，不可以跨域调用。<br>但是<code>Cookie</code>也是不可以或缺的：<code>Cookie</code>的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而<code>Web Storage</code>仅仅是为了在本地“存储”数据而生。</strong></p><h3 id="localStorage-和-sessionStorage的方法"><a href="#localStorage-和-sessionStorage的方法" class="headerlink" title="localStorage 和 sessionStorage的方法"></a>localStorage 和 sessionStorage的方法</h3><h5 id="1-setItem存储value"><a href="#1-setItem存储value" class="headerlink" title="1. setItem存储value"></a>1. <strong>setItem存储value</strong></h5><p>用途：将value存储到key字段<br>用法：.setItem( key, value)<br>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.setItem(<span class="string">"key"</span>, <span class="string">"value1"</span>)</span><br><span class="line">localStorage.setItem(<span class="string">"site"</span>, <span class="string">"value2"</span>);</span><br></pre></td></tr></table></figure><h5 id="2-getItem获取value"><a href="#2-getItem获取value" class="headerlink" title="2. getItem获取value"></a>2. <strong>getItem获取value</strong></h5><p>用途：获取指定key本地存储的值<br>用法：.getItem(key)<br>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = sessionStorage.getItem(<span class="string">"key"</span>)</span><br><span class="line"><span class="keyword">let</span> site = localStorage.getItem(<span class="string">"site"</span>)</span><br></pre></td></tr></table></figure><h5 id="3-removeItem删除key"><a href="#3-removeItem删除key" class="headerlink" title="3. removeItem删除key"></a>3. <strong>removeItem删除key</strong></h5><p>用途：删除指定key本地存储的值<br>用法：.removeItem(key)<br>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.removeItem(<span class="string">"key"</span>)</span><br><span class="line">localStorage.removeItem(<span class="string">"site"</span>)</span><br></pre></td></tr></table></figure><h5 id="4-clear清除所有的key-value"><a href="#4-clear清除所有的key-value" class="headerlink" title="4. clear清除所有的key/value"></a>4. <strong>clear清除所有的key/value</strong></h5><p>用途：清除所有的key/value<br>用法：.clear()<br>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.clear()</span><br><span class="line">localStorage.clear()</span><br></pre></td></tr></table></figure><h5 id="5-其他操作方法：-操作和"><a href="#5-其他操作方法：-操作和" class="headerlink" title="5. 其他操作方法：.操作和[]"></a>5. <strong>其他操作方法：<code>.</code>操作和<code>[]</code></strong></h5><p>web Storage不但可以用自身的<code>setItem,getItem</code>等方便存取，也可以像普通对象一样用点<code>(.)</code>操作符，及<code>[]</code>的方式进行数据存储，像如下的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> storage = <span class="built_in">window</span>.localStorage</span><br><span class="line">storage.key1 = <span class="string">"value1"</span></span><br><span class="line">storage[<span class="string">"key2"</span>] = <span class="string">"value2"</span></span><br><span class="line"><span class="built_in">console</span>.log(storage.key1)  <span class="comment">//  value1</span></span><br><span class="line"><span class="built_in">console</span>.log(storage[<span class="string">"key2"</span>])  <span class="comment">//  value2</span></span><br></pre></td></tr></table></figure><h5 id="6-localStorage-和-sessionStorage的遍历"><a href="#6-localStorage-和-sessionStorage的遍历" class="headerlink" title="6. localStorage 和 sessionStorage的遍历"></a>6. <strong>localStorage 和 sessionStorage的遍历</strong></h5><p><code>sessionStorage 和 localStorage</code>提供的<code>key() 和 length</code>可以方便的实现存储的数据遍历<br>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> storage = <span class="built_in">window</span>.localStorage</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i &lt; storage.length;i++)&#123;</span><br><span class="line">  <span class="keyword">let</span> key = storage.key(i)</span><br><span class="line">  <span class="keyword">let</span> value = storage.getItem(key)     </span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">"="</span> + value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-storage事件"><a href="#7-storage事件" class="headerlink" title="7. storage事件"></a>7. <strong>storage事件</strong></h5><p><code>storage</code>还提供了<code>storage</code>事件，当<code>键值</code>改变或者<code>clear</code>的时候，就可以触发<code>storage</code>事件，如下面的代码就添加了一个storage事件改变的监听：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener)&#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">"storage"</span>,handle_storage,<span class="literal">false</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent)&#123;</span><br><span class="line">  <span class="built_in">window</span>.attachEvent(<span class="string">"onstorage"</span>,handle_storage)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle_storage</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ev = ev || <span class="built_in">window</span>.ev </span><br><span class="line">  <span class="comment">//  其中storage事件有以下属性</span></span><br><span class="line">  ev.key  <span class="comment">//  存储store的key名。</span></span><br><span class="line">  ev.oldValue  <span class="comment">//  更新前的值。如果该键为新增加，则这个属性为null。 </span></span><br><span class="line">  ev.newValue  <span class="comment">//  更新后的值，如果该键被删除，则这个属性为null。</span></span><br><span class="line">  ev.url  <span class="comment">//  原始触发storage事件的那个网页的网址。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说说&lt;code&gt;LocalStorage&lt;/code&gt;与&lt;code&gt;SessionStorage&lt;/code&gt;的关系、以及&lt;code&gt;Cookie&lt;/code&gt;与它们的区别。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="html5" scheme="http://yoursite.com/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>for...in和for...of循环的区别</title>
    <link href="http://yoursite.com/2017/07/for-in-and-for-of/"/>
    <id>http://yoursite.com/2017/07/for-in-and-for-of/</id>
    <published>2017-07-10T06:26:00.000Z</published>
    <updated>2019-08-05T01:27:19.938Z</updated>
    
    <content type="html"><![CDATA[<p>简单了解下…..</p><a id="more"></a><h3 id="for-in测试"><a href="#for-in测试" class="headerlink" title="for in测试"></a><code>for in</code>测试</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'a'</span>,<span class="number">1</span>],[<span class="string">'b'</span>,<span class="number">2</span>],[<span class="string">'c'</span>,<span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">//  遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">in</span> a)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)  <span class="comment">//  得到的是下标 0 1 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">in</span> s)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)  <span class="comment">//  不起作用，无法遍历Set</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">in</span> m)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)  <span class="comment">//  不起作用，无法遍历Map</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-of测试"><a href="#for-of测试" class="headerlink" title="for of测试"></a><code>for of</code>测试</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'c'</span>])</span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'a'</span>,<span class="number">1</span>],[<span class="string">'b'</span>,<span class="number">2</span>],[<span class="string">'c'</span>,<span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">//  遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> a)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)  <span class="comment">//  得到的是值 a b c</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> s)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)  <span class="comment">//  得到的是值 a b c</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> m)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key)  <span class="comment">//  得到的是key值 a b c</span></span><br><span class="line">  <span class="built_in">console</span>.log(value)  <span class="comment">//  得到的是value值 1 2 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-in的问题"><a href="#for-in的问题" class="headerlink" title="for in的问题"></a><code>for in</code>的问题</h3><p><strong><code>for in</code>遍历的实际上是对象的属性名称。一个<code>Array</code>数组也是一个对象，数组中的每个元素的索引被视为属性名称，所以我们可以看到使用<code>for...in</code>循环<code>Array</code>数组时，拿到的其实是每个元素的索引。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">a.name = <span class="string">'wpnl'</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">in</span> a)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)  <span class="comment">//  0 1 2 name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所示，当我们为a多手动添加一个属性<code>name</code>的时候，<code>for...in</code>循环会把name属性也包括在内，而<code>Array</code>的<code>length</code>属性却不包括在内。</p><p><code>for...of</code>循环则不存在上述的问题，它只循环集合本身的元素。这就是为什么引入<code>for...of</code>循环。所以<code>for...of</code>循环功能比较好，推荐使用</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>for-of</code>循环的几个特征</p><ul><li>这是最简洁、最直接的遍历数组元素的语法。</li><li>这个方法避开了<code>for-in</code>循环的所有缺陷。</li><li>与<code>forEach</code>不同的是，它可以正确响应<code>break、continue 和 return</code>语句。</li><li>其不仅可以遍历数组，还可以遍历类数组对象和其他可迭代对象。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单了解下…..&lt;/p&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>移动meta通用设置</title>
    <link href="http://yoursite.com/2017/06/viewport-meta/"/>
    <id>http://yoursite.com/2017/06/viewport-meta/</id>
    <published>2017-06-29T08:11:00.000Z</published>
    <updated>2019-08-05T01:27:38.844Z</updated>
    
    <content type="html"><![CDATA[<p>关于移动端 <code>&lt;meta&gt;</code> 的一些配置。</p><a id="more"></a><p>一个常用的针对移动网页优化过的页面的 viewport meta 标签大致如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>width</code>：控制 viewport 的大小,如 device-width 为设备的宽度。</li><li><code>height</code>：和 width 相对应，指定高度。</li><li><code>initial-scale</code>：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。</li><li><code>maximum-scale</code>：允许用户缩放到的最大比例。</li><li><code>minimum-scale</code>：允许用户缩放到的最小比例。</li><li><code>user-scalable</code>：用户是否可以手动缩放。</li></ul><hr><p>下面是移动端 <code>&lt;meta&gt;</code> 的通用设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 避免IE使用兼容模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 关键字描述 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"HandheldFriendly"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 删除苹果默认的工具栏和菜单栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置苹果工具栏颜色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telphone=no, email=no"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- uc强制竖屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"screen-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- QQ强制竖屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- UC强制全屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"full-screen"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- QQ强制全屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-fullscreen"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- UC应用模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"browsermode"</span> <span class="attr">content</span>=<span class="string">"application"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- QQ应用模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-page-mode"</span> <span class="attr">content</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- windows phone 点击无高光 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-tap-highlight"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于移动端 &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; 的一些配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="meta" scheme="http://yoursite.com/tags/meta/"/>
    
  </entry>
  
  <entry>
    <title>移动端最小物理像素的实现(border:1px)</title>
    <link href="http://yoursite.com/2017/06/border1px/"/>
    <id>http://yoursite.com/2017/06/border1px/</id>
    <published>2017-06-26T10:22:00.000Z</published>
    <updated>2019-08-05T01:12:31.985Z</updated>
    
    <content type="html"><![CDATA[<p>关于移动端实现最小物理像素1px边框实现。</p><a id="more"></a><p>这个方法的原理很简单 就是通过伪类::after，配合css3的属性进行缩放。下面是代码的方法。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*首先为每一个class添加一个相对定位*/</span></span><br><span class="line"><span class="selector-class">.border-1px</span>, <span class="selector-class">.border-bottom-1px</span>, <span class="selector-class">.border-top-1px</span>, <span class="selector-class">.border-left-1px</span>, <span class="selector-class">.border-right-1px</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*底边边框一像素*/</span></span><br><span class="line"><span class="selector-class">.border-bottom-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute; </span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(*,*,*);  <span class="comment">/*边框颜色自行修改*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*上边边框一像素*/</span></span><br><span class="line"><span class="selector-class">.border-top-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">   <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">   <span class="attribute">position</span>: absolute; </span><br><span class="line">   <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">   <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(*,*,*);  <span class="comment">/*边框颜色自行修改*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*左边边框一像素*/</span></span><br><span class="line"><span class="selector-class">.border-left-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">   <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">   <span class="attribute">position</span>: absolute; </span><br><span class="line">   <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">   <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(*,*,*);  <span class="comment">/*边框颜色自行修改*/</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*右边边框1像素*/</span></span><br><span class="line"><span class="selector-class">.border-right-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">position</span>: absolute; </span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(*,*,*);  <span class="comment">/*边框颜色自行修改*/</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*边框一像素*/</span></span><br><span class="line"><span class="selector-class">.border-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">   <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">   <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(*,*,*);  <span class="comment">/*边框颜色自行修改*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在总的样式表里加上不同的设备像素比对应不同的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*设备像素比*/</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class="number">2.0</span>), only screen and (min-resolution: <span class="number">2dppx</span>) &#123;</span><br><span class="line">    <span class="selector-class">.border-bottom-1px</span><span class="selector-pseudo">::after</span>, <span class="selector-class">.border-top-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(0.5);</span><br><span class="line">    &#125;  </span><br><span class="line">   <span class="selector-class">.border-left-1px</span><span class="selector-pseudo">::after</span>, <span class="selector-class">.border-right-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(0.5);</span><br><span class="line">    &#125; </span><br><span class="line">   <span class="selector-class">.border-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.5);</span><br><span class="line">        <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设备像素比*/</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class="number">3.0</span>), only screen and (min-resolution: <span class="number">3dppx</span>) &#123;</span><br><span class="line">    <span class="selector-class">.border-bottom-1px</span><span class="selector-pseudo">::after</span>, <span class="selector-class">.border-top-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(0.333);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="selector-class">.border-left-1px</span><span class="selector-pseudo">::after</span>, <span class="selector-class">.border-right-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(0.333);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="selector-class">.border-1px</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">300%</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.333);</span><br><span class="line">        <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于设备像素比可以去看张鑫旭老师的博客：<a href="http://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/" target="_blank" rel="noopener">设备像素比devicePixelRatio简单介绍</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于移动端实现最小物理像素1px边框实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>移动端高清显示屏Retina的原理</title>
    <link href="http://yoursite.com/2017/06/retina/"/>
    <id>http://yoursite.com/2017/06/retina/</id>
    <published>2017-06-24T05:32:00.000Z</published>
    <updated>2019-08-05T01:29:12.518Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习移动端开发的时候，发现了很多与pc端不同的问题，其中最普遍的就是关于ppi、设备像素比之类的概念，下面是关于retina高清显示屏原理，了解这个，就能明白为什么移动端的像素与pc端开发的项目不同。</p><a id="more"></a><h3 id="高清显示屏特征"><a href="#高清显示屏特征" class="headerlink" title="高清显示屏特征"></a>高清显示屏特征</h3><ol><li>一种具备超高像素密度的显示屏</li><li>同样大小的屏幕上显示的像素点由1个变为多个</li></ol><p><img src="/assets/images/retina.jpg" alt="高清显示屏"></p><hr><h3 id="高清显示屏下图片变模糊"><a href="#高清显示屏下图片变模糊" class="headerlink" title="高清显示屏下图片变模糊"></a>高清显示屏下图片变模糊</h3><p>了解高清显示屏的原理，如果我们把两张相同的照片放在一台普通显示屏，一台高清显示屏，在同样大小的屏幕上，高清显示屏中的位图会被放大，图片会变得模糊。</p><p>比如像下面右边的图片变模糊了，原因是高清显示屏显示的像素点相比普通显示屏的像素点由1个变为4个，但位置大小还是没有改变，换个意思就是图片被放大了一倍。</p><p><img src="/assets/images/jobs.jpg" alt="高清显示屏与普通显示屏"></p><hr><h3 id="关于-像素"><a href="#关于-像素" class="headerlink" title="关于[像素]"></a>关于[像素]</h3><h5 id="设备像素-device-pixel"><a href="#设备像素-device-pixel" class="headerlink" title="设备像素(device pixel)"></a>设备像素(device pixel)</h5><p>设备像素设是物理概念，指的是设备中使用的物理像素。<br>比如iPhone 5的分辨率640 x 1136px。</p><h5 id="CSS像素-css-pixel"><a href="#CSS像素-css-pixel" class="headerlink" title="CSS像素(css pixel)"></a>CSS像素(css pixel)</h5><p>CSS像素是Web编程的概念，指的是CSS样式代码中使用的逻辑像素。<br>在CSS规范中，长度单位可以分为两类，绝对(absolute)单位以及相对(relative)单位。px是一个相对单位，相对的是设备像素(device pixel)。</p><p><strong>比如iPhone 5使用的是Retina视网膜屏幕，使用<code>2px x 2px的设备像素(device pixel) 代表1px x 1px的CSS像素(css pixel)</code>，所以设备像素数为640 x 1136px，而CSS逻辑像素数为320 x 568px。</strong></p><hr><h3 id="设备像素比-devicePixelRatio-设备像素与CSS像素之间的换算"><a href="#设备像素比-devicePixelRatio-设备像素与CSS像素之间的换算" class="headerlink" title="设备像素比:devicePixelRatio(设备像素与CSS像素之间的换算)"></a>设备像素比:devicePixelRatio(设备像素与CSS像素之间的换算)</h3><p>首先我们要理解2个概念</p><h5 id="物理像素-physical-pixel"><a href="#物理像素-physical-pixel" class="headerlink" title="物理像素(physical pixel)"></a>物理像素(physical pixel)</h5><p>一个物理像素是显示器(手机屏幕)上最小的物理显示单元，在操作系统的调度下，每一个设备像素都有自己的颜色值和亮度值。</p><h5 id="设备独立像素-density-independent-pixel"><a href="#设备独立像素-density-independent-pixel" class="headerlink" title="设备独立像素(density-independent pixel)"></a>设备独立像素(density-independent pixel)</h5><p>简单粗俗的来说就是css像素</p><h5 id="设备像素比-device-pixel-ratio"><a href="#设备像素比-device-pixel-ratio" class="headerlink" title="设备像素比(device pixel ratio)"></a>设备像素比(device pixel ratio)</h5><p><strong>设备像素比 = 物理像素 / 设备独立像素</strong></p><p>在javascript中，可以通过<code>window.devicePixelRatio</code>获取到当前设备的dpr。</p><p>通过计算 devicePixelRatio 的值，是可以区分普通显示屏和高清显示器，当devicePixelRatio值等于1时（也就是最小值），那么它普通显示屏，当devicePixelRatio值大于1(通常是2.0、3.0)，那么它就是高清显示屏。</p><p><strong>了解这个原理，当dpr&gt;1时候，正常的图片像素点与<code>物理像素</code>点个数不是1:1的关系，所以图片像素点不够，所有只能就近取色，从而导致图片模糊</strong></p><p>所以我们知道为什么现在移动端开发一般需要2-3套的图片尺寸大小，一套是用在dpr=1的，<br>一套是用在dpr=2的，一套是用在drp=3的。这样的图片显示才会正常。</p><hr><h3 id="关于Retina下，border：1px的问题"><a href="#关于Retina下，border：1px的问题" class="headerlink" title="关于Retina下，border：1px的问题"></a>关于Retina下，border：1px的问题</h3><p>其实设计师想要的1px，是希望在Retina下的0.5px。既最小的一个物理像素(这是retina下(dpr=2)下能显示的最小单位)。</p><p>一般常用的解决方法：<br><a href="http://fweifeng.com/2017/06/26/border1px.html" target="_blank" rel="noopener">移动端最小物理像素的实现(border:1px)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习移动端开发的时候，发现了很多与pc端不同的问题，其中最普遍的就是关于ppi、设备像素比之类的概念，下面是关于retina高清显示屏原理，了解这个，就能明白为什么移动端的像素与pc端开发的项目不同。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Html5标签之canvas</title>
    <link href="http://yoursite.com/2017/06/HTML5-Canvas/"/>
    <id>http://yoursite.com/2017/06/HTML5-Canvas/</id>
    <published>2017-06-17T14:40:00.000Z</published>
    <updated>2019-08-05T01:30:05.295Z</updated>
    
    <content type="html"><![CDATA[<p>在学习Html5中，感觉canvas非常多方法和命令，在不使用的过程中经常会忘掉，写这篇博文，是为了巩固自己的学习，顺便把知识点记录下来，以后可以遇到不懂时候可以复习，下面是canvas的主要内容。</p><a id="more"></a><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Canvas用于在网页展示图像，并且可以定制内容，基本上它是一个可以用JavaScript操作的位图（bitmap）。其实说白了他的作用就是能在文档中绘图，能做出一些特别的效果。</p><hr><h3 id="绘制简单图形"><a href="#绘制简单图形" class="headerlink" title="绘制简单图形"></a>绘制简单图形</h3><h5 id="使用getConetext-39-2d-39-方法，初始化平面图像环境-目前3d还不支持"><a href="#使用getConetext-39-2d-39-方法，初始化平面图像环境-目前3d还不支持" class="headerlink" title="使用getConetext(&#39;2d&#39;)方法，初始化平面图像环境(目前3d还不支持)"></a>使用<code>getConetext(&#39;2d&#39;)</code>方法，初始化平面图像环境(目前3d还不支持)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br></pre></td></tr></table></figure><h4 id="填充颜色方法"><a href="#填充颜色方法" class="headerlink" title="填充颜色方法"></a>填充颜色方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.fillStyle = <span class="string">'#666'</span>;  <span class="comment">//  设置填充颜色</span></span><br><span class="line">ctx.strokeStyle = <span class="string">'#000'</span>  <span class="comment">//  设置笔触颜色(边框)</span></span><br></pre></td></tr></table></figure><h4 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.strokeStyle = <span class="string">'#000'</span>  <span class="comment">//  设置笔触颜色(边框)</span></span><br><span class="line">ctx.fillStyle = <span class="string">'#666'</span>;  <span class="comment">//  设置填充颜色,要使用fill()才能显示</span></span><br><span class="line"><span class="comment">//  x：矩形左上角的x坐标  x：矩形左上角的y坐标</span></span><br><span class="line"><span class="comment">//  width：矩形的宽度  height：矩形的高度</span></span><br><span class="line">ctx.fillRect(x,y,width,height);</span><br></pre></td></tr></table></figure><h4 id="绘制空心矩形"><a href="#绘制空心矩形" class="headerlink" title="绘制空心矩形"></a>绘制空心矩形</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.strokeStyle = <span class="string">'#666'</span>;  <span class="comment">//  设置笔触颜色(边框)</span></span><br><span class="line">ctx.strokeRect(x,y,width,height);  <span class="comment">//  参数同上</span></span><br></pre></td></tr></table></figure><h4 id="清楚某个矩形区域的内容。"><a href="#清楚某个矩形区域的内容。" class="headerlink" title="清楚某个矩形区域的内容。"></a>清楚某个矩形区域的内容。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.clearRect(x,y,width,height);  <span class="comment">//  参数同上</span></span><br></pre></td></tr></table></figure><hr><h3 id="绘制路径"><a href="#绘制路径" class="headerlink" title="绘制路径"></a>绘制路径</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();  <span class="comment">//  开始路径绘制</span></span><br><span class="line">ctx.moveTo(<span class="number">50</span>,<span class="number">50</span>);  <span class="comment">//  设置路径的起点</span></span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">200</span>);  <span class="comment">//  绘制一条到200,200的直线</span></span><br><span class="line">ctx.lineWidth = <span class="number">1</span>;  <span class="comment">//  设置线宽</span></span><br><span class="line">ctx.strokeStyle = <span class="string">'#666'</span>;  <span class="comment">//  设置线的颜色</span></span><br><span class="line">ctx.stroke();  <span class="comment">//  进行线的着色，输入这个命令线才会可见</span></span><br></pre></td></tr></table></figure><hr><h3 id="绘制圆形和扇形"><a href="#绘制圆形和扇形" class="headerlink" title="绘制圆形和扇形"></a>绘制圆形和扇形</h3><h4 id="绘制扇形的方法"><a href="#绘制扇形的方法" class="headerlink" title="绘制扇形的方法"></a>绘制扇形的方法</h4><p><code>ctx.arc(x,y,radius,startAngle,endAngle,anticlockwise)</code></p><p><code>x</code>和<code>y</code>参数是圆心坐标，<code>radius</code>是半径，<code>startAngle</code>和<code>endAngle</code>则是扇形的起始角度和终止角度（以狐度表示），<code>anticlockwise</code>表示作图是应该逆时针画<code>（true）</code>还是顺时针画<code>（false）</code>。</p><p><code>var hd = Math.PI/180 * 50;  //  角度转弧度公式</code><br><code>var jd = 180/Math.PI * hd;  //  弧度转角度公式</code></p><h4 id="绘制实心的圆形"><a href="#绘制实心的圆形" class="headerlink" title="绘制实心的圆形"></a>绘制实心的圆形</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath(); </span><br><span class="line">ctx.arc(<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">'#666'</span>;</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><h4 id="绘制空心圆形"><a href="#绘制空心圆形" class="headerlink" title="绘制空心圆形"></a>绘制空心圆形</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>);</span><br><span class="line">ctx.lineWidth = <span class="number">1</span>;</span><br><span class="line">ctx.strokeStyle = <span class="string">'#000'</span>;</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><strong>绘制扇形只需要修改<code>startAngle</code>,<code>endAngle</code>参数就可以了</strong></p><hr><h3 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h3><h5 id="fillText-用于添加文本，strokeText-用于添加空心文本"><a href="#fillText-用于添加文本，strokeText-用于添加空心文本" class="headerlink" title="fillText()用于添加文本，strokeText()用于添加空心文本"></a><code>fillText()</code>用于添加文本，<code>strokeText()</code>用于添加空心文本</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.font = <span class="string">'Bold 20px Arial'</span>;  <span class="comment">//  设置字体</span></span><br><span class="line">ctx.textAlign = <span class="string">'left'</span>;  <span class="comment">//  设置文本对齐方式</span></span><br><span class="line">ctx.fillStyle = <span class="string">'#666'</span>;  <span class="comment">//   设置文本填充颜色</span></span><br><span class="line">ctx.fillText(<span class="string">'wpnl'</span>,x,y);  <span class="comment">//  设置文本内容，x，y的坐标</span></span><br><span class="line">ctx.strokeText(<span class="string">'wpnl'</span>,<span class="number">10</span>,<span class="number">100</span>);  <span class="comment">//  绘制空心字</span></span><br></pre></td></tr></table></figure><p><em>绘制文本不能使文本断行，所以如果要生成多行文本，只能多次调用上面方法</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习Html5中，感觉canvas非常多方法和命令，在不使用的过程中经常会忘掉，写这篇博文，是为了巩固自己的学习，顺便把知识点记录下来，以后可以遇到不懂时候可以复习，下面是canvas的主要内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="html5" scheme="http://yoursite.com/tags/html5/"/>
    
  </entry>
  
</feed>
